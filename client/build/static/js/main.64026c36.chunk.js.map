{"version":3,"sources":["Job.js","JobModal.js","Jobs.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","flex","display","alignItems","topicsWindow","width","height","borderRight","chatWindow","padding","chatBox","button","chip","background","marginBottom","marginRight","fontWeight","Job","job","onClick","timeString","time","part","split","slice","year","createTimeString","created_at","Paper","className","Typography","variant","title","company","location","Transition","React","forwardRef","props","ref","Slide","direction","JobModal","open","handleClose","Dialog","TransitionComponent","keepMounted","onClose","aria-labelledby","aria-describedby","DialogTitle","id","src","company_logo","DialogContent","DialogContentText","dangerouslySetInnerHTML","__html","description","DialogActions","Button","color","href","url","target","Jobs","jobs","useState","setOpen","selectedJob","selectJob","activeStep","setActiveStep","numJobs","length","maxSteps","Math","ceil","jobsOnPage","component","style","letterSpacing","map","key","console","log","MobileStepper","steps","position","nextButton","size","prevActiveStep","disabled","KeyboardArrowRight","backButton","KeyboardArrowLeft","updateCallback","a","fetch","res","json","App","jobList","updateJobs","useEffect","fetchJobs","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.64026c36.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Paper, Typography } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  flex: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n  },\r\n  topicsWindow: {\r\n    width: \"30%\",\r\n    height: \"250px\",\r\n    borderRight: \"1px solid grey\",\r\n  },\r\n  chatWindow: {\r\n    width: \"70%\",\r\n    height: \"250px\",\r\n    padding: \"20px\",\r\n  },\r\n  chatBox: {\r\n    width: \"85%\",\r\n  },\r\n  button: {\r\n    width: \"85%\",\r\n  },\r\n  chip: {\r\n    background: \"pink\",\r\n    marginBottom: \"3px\",\r\n    marginRight: \"3px\",\r\n    fontWeight: \"bold\",\r\n  },\r\n}));\r\n\r\nconst createTimeString = (time) => {\r\n  let part = time.split(\" \").slice(0, 3);\r\n  let year = time.split(\" \").slice(-1);\r\n  let timeString = part[0] + \" \" + part[2] + \" \" + part[1] + \" \" + year;\r\n  // let stringDate = part[2] + \" \" + part[1] + \" \" + year;\r\n  // let theDate = DateTime.fromFormat(stringDate, \"dd LLL yyyy\");\r\n  return timeString;\r\n};\r\n\r\nexport default function Job({ job, onClick }) {\r\n  const classes = useStyles();\r\n  let timeString = createTimeString(job.created_at);\r\n\r\n  return (\r\n    <Paper onClick={onClick} className=\"job\">\r\n      <div>\r\n        <Typography variant=\"h5\">{job.title}</Typography>\r\n        <Typography variant=\"h6\">{job.company}</Typography>\r\n        <Typography>{job.location}</Typography>\r\n      </div>\r\n\r\n      <div>\r\n        <Typography>{timeString}</Typography>\r\n      </div>\r\n    </Paper>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Slide from \"@material-ui/core/Slide\";\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nexport default function JobModal({ job, open, handleClose }) {\r\n  if (!job.title) {\r\n    return <div />;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        open={open}\r\n        TransitionComponent={Transition}\r\n        keepMounted\r\n        onClose={handleClose}\r\n        aria-labelledby=\"alert-dialog-slide-title\"\r\n        aria-describedby=\"alert-dialog-slide-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-slide-title\">\r\n          {job.company}\r\n          <img className=\"detail-logo\" src={job.company_logo} />\r\n          <hr />\r\n          {job.title}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText\r\n            id=\"alert-dialog-slide-description\"\r\n            dangerouslySetInnerHTML={{ __html: job.description }}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Close\r\n          </Button>\r\n          <a href={job.url} target=\"_blank\">\r\n            <Button onClick={handleClose} color=\"primary\">\r\n              Apply\r\n            </Button>\r\n          </a>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport {\r\n  // makeStyles,\r\n  // Paper,\r\n  Typography,\r\n  MobileStepper,\r\n  // List,\r\n  // ListItem,\r\n  // ListItemText,\r\n  // Chip,\r\n  Button,\r\n  // TextField,\r\n} from \"@material-ui/core\";\r\nimport { KeyboardArrowLeft, KeyboardArrowRight } from \"@material-ui/icons\";\r\n\r\nimport Job from \"./Job\";\r\nimport JobModal from \"./JobModal\";\r\n\r\nexport default function Jobs({ jobs }) {\r\n  // Job Modal\r\n  const [open, setOpen] = React.useState(false);\r\n  const [selectedJob, selectJob] = React.useState({});\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  // Pagination\r\n  const [activeStep, setActiveStep] = React.useState(0);\r\n\r\n  const handleNext = () => {\r\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n  };\r\n\r\n  const handleBack = () => {\r\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n  };\r\n\r\n  const numJobs = jobs.length;\r\n  const jobsPerPage = 25;\r\n  const maxSteps = Math.ceil(numJobs / jobsPerPage);\r\n  const jobsOnPage = jobs.slice(\r\n    activeStep * jobsPerPage,\r\n    activeStep * jobsPerPage + jobsPerPage\r\n  );\r\n\r\n  return (\r\n    <div className=\"jobs\">\r\n      <JobModal open={open} job={selectedJob} handleClose={handleClose} />\r\n      <Typography\r\n        variant=\"h4\"\r\n        component=\"h1\"\r\n        style={{\r\n          fontWeight: \"bold\",\r\n          letterSpacing: \"2px\",\r\n          color: \"#171D1C\",\r\n        }}\r\n      >\r\n        Entry Level Software Jobs\r\n      </Typography>\r\n      <Typography\r\n        variant=\"h6\"\r\n        component=\"h2\"\r\n        style={{\r\n          fontWeight: \"bold\",\r\n          letterSpacing: \"2px\",\r\n          color: \"#171D1C\",\r\n        }}\r\n      >\r\n        Found {numJobs} jobs\r\n      </Typography>\r\n      {jobsOnPage.map((job) => (\r\n        <Job\r\n          job={job}\r\n          key={job.id}\r\n          onClick={() => {\r\n            console.log(\"clicked\");\r\n            handleClickOpen();\r\n            selectJob(job);\r\n          }}\r\n        />\r\n      ))}\r\n\r\n      <div>Page</div>\r\n      <MobileStepper\r\n        steps={maxSteps}\r\n        position=\"static\"\r\n        variant=\"text\"\r\n        activeStep={activeStep}\r\n        nextButton={\r\n          <Button\r\n            size=\"small\"\r\n            onClick={handleNext}\r\n            disabled={activeStep === maxSteps - 1}\r\n          >\r\n            Next\r\n            {<KeyboardArrowRight />}\r\n          </Button>\r\n        }\r\n        backButton={\r\n          <Button size=\"small\" onClick={handleBack} disabled={activeStep === 0}>\r\n            {<KeyboardArrowLeft />}\r\n            Back\r\n          </Button>\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Jobs from \"./Jobs\";\n\nconst JOB_API_URL = \"/api/jobs\";\n\n// const mockJobs = [\n//   { id: 1, title: \"SWE 1\", company: \"Google\" },\n//   { id: 2, title: \"SWE 2\", company: \"Facebook\" },\n//   { id: 3, title: \"SWE 3\", company: \"Microsoft\" },\n// ];\n\nasync function fetchJobs(updateCallback) {\n  const res = await fetch(JOB_API_URL);\n  const json = await res.json();\n\n  updateCallback(json);\n  console.log({ json });\n}\n\nfunction App() {\n  const [jobList, updateJobs] = React.useState([]);\n\n  React.useEffect(() => {\n    fetchJobs(updateJobs);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Jobs jobs={jobList} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}